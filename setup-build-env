#!/bin/bash
# Copyright (C) 2018-2022 F5 Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

set -e

PROJECT_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
# shellcheck source=src/lib/bash/common.sh
source "$PROJECT_DIR/src/lib/bash/util/distro_info.sh"

OEM_DIR="$PROJECT_DIR/oem/"
###############################################################################
# This is a standalone script that installs all the necessary packages for
# the ve-image-generation tool that generates various images for the private
# and public cloud that BIG-IP VE supports.
# 
# The script has been developed and tested on the following Linux distributions:
#   - Ubuntu 18.04.1 LTS (Bionic Beaver)
###############################################################################

ADD_DEVTOOLS=false
INSTALL_ALIBABA=false
INSTALL_AWS=false
INSTALL_AZURE=false
INSTALL_GCE=false
INSTALL_ALL=true
RAW_DISK_INSTALL_MARKER=".raw_disk_install"

function print_help {
    echo "Optional arguments:"
    echo "  --add-dev-tools       Adds tools to verify code style and functionality"
    echo "  --alibaba             Installs only tools needed for alibaba"
    echo "  --aws                 Installs only tools needed for aws"
    echo "  --azure               Installs only tools needed for azure"
    echo "  --gce                 Installs only tools needed for gce"
    echo "  --qcow2               Installs only tools needed for qcow2"
    echo "  --vhd                 Installs only tools needed for vhd"
    echo "  --vmware              Installs only tools needed for vmware"
}

#-----------------------------------------------------------------------------#
# Create metadata file to track the version associated with this run
#-----------------------------------------------------------------------------#
function create_version_metadata {
    # Get version from shared config vars file
    shared_vars_file="$PROJECT_DIR/src/resource/vars/shared_vars.yml"
    current_version=$(yq -r .VERSION_NUMBER.default "$shared_vars_file")

    # Create version metadata
    if ! json_write="$(jq -n --arg v "$current_version" '{"VERSION": $v}' 2>&1)"; then
        error_and_exit "jq error while adding VERSION to json data: $json_write"
    fi

    local marker_location
    local venv_dir
    venv_dir=$(dirname "$VIRTUAL_ENV")
    if [ -z "$venv_dir" ]; then
        marker_location="${PROJECT_DIR}"
    else
        marker_location="$(dirname "$VIRTUAL_ENV")"
    fi
    if [ "$INSTALL_ALL" == "true" ]; then
	echo "$json_write" > "${marker_location}/.alibaba.json"
	echo "$json_write" > "${marker_location}/.aws.json"
	echo "$json_write" > "${marker_location}/.azure.json"
	echo "$json_write" > "${marker_location}/.gce.json"
    else
	if [ "$INSTALL_ALIBABA" == "true" ]; then
           echo "$json_write" > "${marker_location}/.alibaba.json"
	fi
	if [ "$INSTALL_AWS" == "true" ]; then
            echo "$json_write" > "${marker_location}/.aws.json"
        fi
	if [ "$INSTALL_AZURE" == "true" ]; then
            echo "$json_write" > "${marker_location}/.azure.json"
        fi
	if [ "$INSTALL_GCE" == "true" ]; then
            echo "$json_write" > "${marker_location}/.gce.json"
        fi
    fi

    # Write version to metadata file
    # in Docker situations this needs to be where venv is
    local info_file
    local venv_dir
    venv_dir=$(dirname "$VIRTUAL_ENV")
    if [ -z "$venv_dir" ]; then
        info_file="${PROJECT_DIR}/${RAW_DISK_INSTALL_MARKER}.json"
    else
	info_file="$(dirname "$VIRTUAL_ENV")/${RAW_DISK_INSTALL_MARKER}.json"
    fi
    echo "$json_write" > "$info_file"

    echo "Wrote version $current_version to $info_file"
}

function check_nonroot_sudo {
    if ! sudo -v; then
        echo "Not running as root user and \"sudo\" is not installed"
        exit 1
    fi
}

# Process command line options
while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    case $key in
        --add-dev-tools)
            ADD_DEVTOOLS=true
            ;;
        --alibaba)
            INSTALL_ALIBABA=true
	    INSTALL_ALL=false
	    ;;
	--aws)
            INSTALL_AWS=true
	    INSTALL_ALL=false
            ;;
	--azure)
            INSTALL_AZURE=true
	    INSTALL_ALL=false
            ;;
	--gce)
            INSTALL_GCE=true
	    INSTALL_ALL=false
            ;;
        --qcow2)
	    #INSTALL_QCOW2=true
	    INSTALL_ALL=false
	    ;;
	--vhd)
            #INSTALL_VHD=true
            INSTALL_ALL=false
	    ;;
	--vmware)
            #INSTALL_VMWARE=true
            INSTALL_ALL=false
            ;;
	-h|--help)
            print_help
            exit 1
            ;;
    esac
done

set -x

# Ensure that we're running on a supported Linux distribution.
distro="$(get_distro)"
if ! is_supported_distro "$distro"; then
    echo "Distro [$distro] is not supported! Unable to run setup script!"
    exit 1
fi

# Choose a package installer based on the current Linux distribution.
if grep -E "(ubuntu)|(debian)" <<< "$distro"; then
    PACKAGE_INSTALLER="apt-get"
    export DEBIAN_FRONTEND=noninteractive
elif grep -E "alpine" <<< "$distro"; then
    PACKAGE_INSTALLER="apk"
else
    echo "No package installer supported for distro [$distro]! Unable to run setup script!"
    exit 1
fi


#-----------------------------------------------------------------------------#
# Packages required for bundle.
#------------------------------#
# First of all, install the build/development and distribution specific tools.
case $PACKAGE_INSTALLER in
apt-get)
    if [[ $EUID -eq 0 ]]; then
        # Refresh packages to find sudo
        $PACKAGE_INSTALLER update -y

        # Install sudo
        $PACKAGE_INSTALLER install -y sudo
    else
        check_nonroot_sudo	
    fi

    # Install the build/development tools like make/gcc etc.
    sudo $PACKAGE_INSTALLER install -y build-essential

    # Installing the rpm package requires us to set a timezone
    ln -snf /usr/share/zoneinfo/"$TZ" /etc/localtime && echo "$TZ" > /etc/timezone

    # Some ubuntu distributions don't have rpm2cpio and cpio installed by default.
    sudo $PACKAGE_INSTALLER install -y --no-install-recommends rpm2cpio cpio

    # genisoimage contains isoinfo command
    sudo $PACKAGE_INSTALLER install -y genisoimage

    if [ -d "$OEM_DIR" ]; then
        # Ubuntu doesn't use RPMs for package management, but the rpm package is still required in order
        # to update rpm package contents.
        sudo $PACKAGE_INSTALLER install -y rpm
    fi

    sudo $PACKAGE_INSTALLER install -y --no-install-recommends jq wget curl zip unzip

    # qemu-kvm package in Ubuntu provides everything that we need for bundle
    # including both qemu-system-x86_64 and qemu-img.
    sudo $PACKAGE_INSTALLER install -y qemu-kvm

    sudo $PACKAGE_INSTALLER install -y python3-pip
    sudo $PACKAGE_INSTALLER install -y python3-venv

    ;;

apk)
    if [[ $EUID -eq 0 ]]; then
        # Refresh packages to find sudo
        $PACKAGE_INSTALLER update

        # Install sudo
        $PACKAGE_INSTALLER add sudo
    else
        check_nonroot_sudo
    fi

    sudo $PACKAGE_INSTALLER add make cdrkit tar
    sudo $PACKAGE_INSTALLER add --upgrade gzip grep util-linux e2fsprogs coreutils
    sudo $PACKAGE_INSTALLER add --no-cache python3-dev rpm2cpio gcc cpio musl-dev libffi-dev openssl-dev && \
    if [ ! -e /usr/bin/python ]; then ln -sf python3 /usr/bin/python ; fi && \
    \

    sudo $PACKAGE_INSTALLER add jq wget curl zip unzip

    sudo $PACKAGE_INSTALLER add libvirt-daemon qemu-img qemu-system-x86_64 openrc
    rc-update add libvirtd

    #adding glibc using wget
    sudo $PACKAGE_INSTALLER --no-cache add ca-certificates wget
    sudo wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
    sudo wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk
    sudo $PACKAGE_INSTALLER add glibc-2.28-r0.apk
    ;;

*)
    >&2 echo "Unknown '$PACKAGE_INSTALLER'."
    exit 1
    esac


if [ -d "$OEM_DIR" ] && [ "$PACKAGE_INSTALLER" == "apt-get" ]; then
    sudo $PACKAGE_INSTALLER install -y --no-install-recommends isomd5sum
fi

# Add the current user to "kvm" group if "kvm" group exists, and the user is not a member.
if getent group kvm | grep -E &>/dev/null "(.*:){3}.*?\b${USER}\b"; then
    echo "User '${USER}' is a member of the 'kvm' group"
    ADDED_USER_TO_KVM_GROUP=false
else
    echo "Adding user '${USER}' to the 'kvm' group"
    case $PACKAGE_MANAGER in
    apt-get)
        sudo usermod -aG kvm "$(id -un)"
        ;;
    apk)
        sudo adduser "$(whoami)" kvm
        ;;

    *)
        >&2 echo "Unknown '$PACKAGE_INSTALLER'."
        ;;
    esac
    ADDED_USER_TO_KVM_GROUP=true
fi

qemu_rules_file="/lib/udev/rules.d/60-qemu-system-common.rules"
reboot_required_file="/var/run/reboot-required"

if [[ -f $qemu_rules_file ]]; then
    sudo sed -i 's/\(MODE\)="[^"]*"/\1="0666"/' $qemu_rules_file
else
    echo "Could not find $qemu_rules_file. There might be kvm permission issues."
fi
#-----------------------------------------------------------------------------#


#-----------------------------------------------------------------------------#
# Python package management
#------------------------------#

# Create Python virtual environment if it doesn't already exist.
VENV_DIR="$PROJECT_DIR/.venv"
if [[ ! -f "$VENV_DIR/pyvenv.cfg" ]]; then
    python3 -m venv "$VENV_DIR"
fi

# Active the Python virtual environment
# shellcheck disable=SC1090,SC1091
source "$VENV_DIR/bin/activate"

python3 -m pip install --upgrade pip

pip3 install wheel
export CRYPTOGRAPHY_DONT_BUILD_RUST=1
pip3 install cryptography==37.0.1

#-----------------------------------------------------------------------------#

# F5 Telemetry package
pip3 install f5-teem

#-----------------------------------------------------------------------------#
# AWS Package setup.
# boto3: a Python SDK which Python code uses to interact with AWS.
#        bonus trivia:  Boto is not an acronym.  It's a species of pink river
#        dolphin which lives in the Amazon rain forest.
#------------------------------#
if [ "$INSTALL_AWS" == "true" ] || [ "$INSTALL_ALL" == "true" ]; then
    pip3 install boto3==1.17.57
    pip3 install moto==1.3.13
    pip3 install pyyaml==5.4.1
fi   
#-----------------------------------------------------------------------------#


#-----------------------------------------------------------------------------#
# gcloud tools installation for GMI.
#------------------------------#
# These steps are taken from here in their entirity:
#   https://cloud.google.com/storage/docs/gsutil_install

if [ "$INSTALL_GCE" == "true" ] || [ "$INSTALL_ALL" == "true" ]; then

    case $PACKAGE_INSTALLER in
    apt-get)
	# Create an environment variable for the correct distribution:
	sudo $PACKAGE_INSTALLER install -y lsb-release
	lsb_rel=$(lsb_release -c -s)
	lsb_rel_version=$(lsb_release -r)
	echo "OS version is: $lsb_rel_version"

        if [[ "$lsb_rel_version" == *"20.04"* ]]; then
		wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-380.0.0-linux-x86_64.tar.gz
		tar -xf google-cloud-sdk-380.0.0-linux-x86_64.tar.gz
		(cd google-cloud-sdk && yes | ./install.sh)
		rm -rf google-cloud-sdk
		rm google-cloud-sdk-380.0.0-linux-x86_64.tar.gz

        # google-cloud-storage package version
        GOOGLE_CLOUD_STORAGE_VERSION="2.2.1"
	else # 18.04
		export CLOUD_SDK_REPO="cloud-sdk-$lsb_rel"

		# If not already defined, add the Cloud SDK distribution URI as a package source:
		google_sdk_uri="deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main"
		google_sources_file="/etc/apt/sources.list.d/google-cloud-sdk.list"
		if ! grep -Fxq "$google_sdk_uri" "$google_sources_file"; then
		    echo "$google_sdk_uri" | sudo tee -a "$google_sources_file"
		fi

		# Import the Google Cloud public key:
		curl https://packages.cloud.google.com/apt/doc/apt-key.gpg \
			| sudo apt-key add -

		# Refresh the list of packages as per the updated gcloud package source
		# in the above two steps.
		sudo $PACKAGE_INSTALLER update

		# Install the Cloud SDK:
		sudo $PACKAGE_INSTALLER install -y google-cloud-sdk

        # google-cloud-storage package version
        GOOGLE_CLOUD_STORAGE_VERSION="2.0.0"
	fi
	;;
    apk)
        # There is no specific distribution for alpine
        sudo pip install -U gsutil

        # google-cloud-storage package version
        GOOGLE_CLOUD_STORAGE_VERSION="2.2.1"
	;;

    *)
	>&2 echo "Unknown '$PACKAGE_INSTALLER'."
	;;
    esac
    #-----------------------------------------------------------------------------#
    #-----------------------------------------------------------------------------#
    # Google Cloud package setup.
    #------------------------------#
    # required Google Cloud Python SDK modules
    #  - https://pypi.org/project/google-cloud-storage/ (for uploading blob and
    #  metadata tags)
    #  - https://pypi.org/project/google-api-python-client/ (for creating image
    #  with blob url) (optional if directly deploying with blob)
    #  - https://pypi.org/project/google-auth/ (for authenticating to google using
    #  oauth2 credentials.  This is a replacement for the deprecated oauth2client
    #  module)

    pip3 install google-api-python-client==2.43.0 google-cloud-storage==$GOOGLE_CLOUD_STORAGE_VERSION google-auth==2.6.3

    pip3 install google-cloud-core==2.3.0
fi 

#-----------------------------------------------------------------------------#
# Azure package setup
#------------------------------#

if [ "$INSTALL_AZURE" == "true" ] || [ "$INSTALL_ALL" == "true" ]; then
    
    # Azure SDK for Python 	
    pip3 install azure-identity==1.5.0
    pip3 install msrestazure==0.6.4
    pip3 install azure-storage-blob==12.11.0
    pip3 install azure-mgmt-compute==26.1.0
    
fi
#-----------------------------------------------------------------------------#


#-----------------------------------------------------------------------------#
# Alibaba package setup.
#------------------------------#
if [ "$INSTALL_ALIBABA" == "true" ] || [ "$INSTALL_ALL" == "true" ]; then
    # oss2 of aliyun-oss-python-sdk is used to upload to the storage
    pip3 install oss2==2.14.0
    # aliyun python APIs used in alibaba_commands.py
    pip3 install aliyun-python-sdk-core==2.13.33
    pip3 install aliyun-python-sdk-ecs==4.23.11
fi


#-----------------------------------------------------------------------------#
# python-requests package setup.
#------------------------------#
# This is typically installed on minimal images.
pip3 install requests==2.25.0


#-----------------------------------------------------------------------------#
# retry package setup.
#------------------------------#
# Retry decorator for repeating service calls for recoverable errors
pip3 install retry==0.9.2


#-----------------------------------------------------------------------------#
# YAML tools setup.
#------------------------------#
# yq is used to parse YAML files inside BASH scripts
# pyyaml is used to parse YAML files inside Python scripts
pip3 install yq==2.12.0
pip3 install pyyaml==5.4.1

#-----------------------------------------------------------------------------#
# Misc Python tools
#------------------------------#
# distro detection module for platform-specific logic.  Used since platform.distro is deprecated.
pip3 install distro==1.5.0

if [ -d "$OEM_DIR" ]; then
    # pycdlib is used for reading, modifying, and recreating ISO files.
    pip3 install pycdlib==1.11.0
fi

#-----------------------------------------------------------------------------#
# Adding tools for verifying project code
#-----------------------------------------------------------------------------#
if [[ $ADD_DEVTOOLS = true ]]; then
    # Install pylint (used for linting python files)
    pip3 install pylint==2.8.2

    # Install coverage (used for python unittest coverage)
    pip3 install coverage==5.5

    case $PACKAGE_INSTALLER in
    apt-get)
	# Install git (used for checking dependency files on pipeline)
        sudo $PACKAGE_INSTALLER install -y git

        # Install shellcheck (used for linting bash files)
        sudo $PACKAGE_INSTALLER install -y shellcheck

        # Install BATS framework (used for unit testing bash files)
        sudo $PACKAGE_INSTALLER install -y bats

        # Install bc and dc (used for example unit tests)
        sudo $PACKAGE_INSTALLER install -y bc
        sudo $PACKAGE_INSTALLER install -y dc

        # Install parted and udev for use by convert qemu unit tests
        sudo $PACKAGE_INSTALLER install -y parted
        sudo $PACKAGE_INSTALLER install -y udev

        # Install modprobe
        sudo $PACKAGE_INSTALLER install -y kmod
	;;
	
    apk)
	sudo $PACKAGE_INSTALLER add git shellcheck bats bc parted udev kmod
       	;;
    *)
        >&2 echo "Unknown '$PACKAGE_INSTALLER'."
        ;;
    esac

    # Install anybadge (used for generating images to display on pipeline)
    pip3 install anybadge==1.5.1


    # Install update-copyright tool
    pip3 install update-copyright==0.6.2
fi

set +x

# Create metadata
create_version_metadata

# Display advisory banners
if [[ $ADDED_USER_TO_KVM_GROUP = true ]]; then
    echo "---------------------------------------------------------------------------------"
    echo "User '${USER}' was added to the 'kvm' group.  You must log out and log back in to"
    echo "pick up the permissions changes for this user."
    echo "---------------------------------------------------------------------------------"
fi

if [[ -f $reboot_required_file ]]; then
    echo "---------------------------------------------------------------------------------"
    echo "You must reboot your system to complete the setup process."
    echo "---------------------------------------------------------------------------------"
fi

# END.
