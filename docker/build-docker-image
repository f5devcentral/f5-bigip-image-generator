#!/bin/bash
# Copyright (C) 2019-2021 F5 Networks, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

set -e

main() {

PARAMETERS=" "
BASE_IMAGE="alpine"
# Process command line options
while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    case $key in
        --add-dev-tools)
	    PARAMETERS+="--add-dev-tools "
            ;;
        --alibaba)
            PARAMETERS+="--alibaba "
            ;;
        --aws)
            PARAMETERS="--aws "
            ;;
        --azure)
            PARAMETERS+="--azure "
            ;;
	--base-image-ubuntu)
            BASE_IMAGE="ubuntu"
	    ;;
        --gce)
            PARAMETERS+="--gce "
	    ;;
	--vhd)
	    PARAMETERS+="--vhd "
	    ;;
	--vmware)
            PARAMETERS+="--vmware "
	    ;;
	--qcow2)
            PARAMETERS+="--qcow2 "
	    ;;
        -h|--help)
            print_help
            exit 1
            ;;
    esac
done    

    check_commands
    base_image "$@"

    cd ..
    VERSION=$(yq -r .VERSION_NUMBER.default src/resource/vars/shared_vars.yml)
    REPO="f5devcentral"
    PRODUCT="f5-bigip-image-generator"
    TAG="$REPO/$PRODUCT:$VERSION"
    USERNAME="$(whoami)"
    KVM_GROUP_ID=$(getent group kvm | awk -F: '{printf "%d", $3}')

    docker build  \
	  -f "docker/$DOCKERFILE" \
	  --tag "$TAG" \
	  --build-arg BASE_REPO="$BASE_REPO" \
          --build-arg PARAMETERS="$PARAMETERS" \
	  --build-arg USERNAME="$USERNAME" \
	  --build-arg KVM_GROUP_ID="$KVM_GROUP_ID" \
	  --no-cache \
	  .
}


function print_help {
    echo "Optional arguments:"
    echo "  --base-image-ubuntu   Use Ubuntu docker image, default is Alpine"
    echo "  --add-dev-tools       Adds tools to verify code style and functionality"
    echo "  --alibaba             Installs only tools needed for alibaba"
    echo "  --aws                 Installs only tools needed for aws"
    echo "  --azure               Installs only tools needed for azure"
    echo "  --gce                 Installs only tools needed for gce"
}


# Determine which base image to use based on passed in parameters
function base_image {
    DOCKERFILE="Dockerfile"
    if [ "$BASE_IMAGE" = "alpine" ]; then
	BASE_REPO="alpine:3.11.5"
	DOCKERFILE="Dockerfile"
    elif [ "$BASE_IMAGE" = "ubuntu" ]; then
        BASE_REPO="ubuntu:20.04"
        DOCKERFILE="Dockerfile.ubuntu"
    elif [ "$BASE_IMAGE" = "ubuntu18" ]; then
        BASE_REPO="ubuntu:18.04"
	DOCKERFILE="Dockerfile.ubuntu"
    else
	echo "$BASE_IMAGE is not a supported docker base image"
	exit 1
    fi
}


# Verify that all needed commands are installed
function check_commands {
    if [ ! -x  "$(command -v docker)" ]; then
      printf -- "You don\'t seem to have Docker installed.\n";
      printf -- 'Get it: https://www.docker.com/community-edition\n';
      printf -- 'Or run docker in your terminal for suggestions for installing\n';
      printf -- 'Exiting with code 127...\n';
      exit 127;
    fi;

    if [ ! -x  "$(command -v getent)" ]; then
      printf -- "You don\'t seem to have getent installed.\n";
      printf -- 'This can usually be achieved by running: \n';
      printf -- 'apt-get install libc-bin\n';
      printf -- 'Exiting with code 127...\n';
      exit 127;
    fi;


    if [ ! -x  "$(command -v yq)" ]; then
      printf -- "You don\'t seem to have yq installed.\n";
      printf -- 'This can usually be achieved by running: \n';
      printf -- 'pip3 install yq\n';
      printf -- 'Or by checking: https://mikefarah.gitbook.io/yq/';
      printf -- 'Exiting with code 127...\n';
      exit 127;
    fi;
}

main "$@"; exit
